{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Nuvom","text":"<p>\ud83e\udde0 Lightweight, plugin-first task queue for Python \u2014 no Redis, no brokers, fully Windows-compatible.</p> <p>Nuvom is a developer-first background task execution engine that helps you queue, execute, and persist background jobs \u2014 without the baggage of Celery or infrastructure-heavy dependencies.</p> <p>Built with clarity, speed, and extensibility in mind, Nuvom is:</p> <ul> <li>\ud83e\ude9f Fully Windows-compatible \u2014 no POSIX-only dependencies</li> <li>\ud83d\udd0c Plugin-first \u2014 extend queues, backends, and metrics with ease</li> <li>\u2699\ufe0f No Redis, no RabbitMQ, no Docker \u2014 just Python</li> <li>\ud83e\udde0 AST-powered static discovery \u2014 no import-time magic</li> <li>\ud83d\ude80 CLI-first DX \u2014 introspect jobs, retry failures, inspect task metadata</li> <li>\ud83d\udce6 Manifest caching \u2014 blazing-fast task resolution for workers and tooling</li> </ul>"},{"location":"#why-nuvom","title":"Why Nuvom?","text":"<p>Traditional tools like Celery and RQ assume:</p> <ul> <li>Linux environments</li> <li>Redis or RabbitMQ brokers</li> <li>Complex operational setups</li> </ul> <p>Nuvom throws those assumptions out the window. It's designed for:</p> <ul> <li>Solo developers or small teams who want productivity without infra.</li> <li>Plugin authors who need pluggable, testable task systems.</li> <li>Cross-platform developers (especially on Windows).</li> <li>Performance-focused workflows with static analysis, manifest caching, and real observability.</li> </ul>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li><code>@task</code> decorator with <code>.delay()</code> / <code>.map()</code> </li> <li>AST-based static discovery \u2014 no imports  </li> <li>Graceful retry + timeout logic  </li> <li>Pluggable result and queue backends  </li> <li>SQLite, file, and in-memory backends built-in  </li> <li>Plugin loader with <code>.toml</code> registry  </li> <li>Prometheus metrics plugin  </li> <li>Job metadata, tracebacks, and historical CLI inspection  </li> <li>Typed config via <code>.env</code> + Pydantic  </li> <li>CLI commands to run, retry, inspect, and monitor jobs  </li> <li>Compatible with Python 3.8+</li> </ul>"},{"location":"#example","title":"Example","text":"<pre><code>from nuvom.task import task\n\n@task(retries=2, retry_delay_secs=5, timeout_secs=3)\ndef add(x, y):\n    return x + y\n\n# Submit job\njob = add.delay(2, 3)\n````\n\n```bash\nnuvom runworker                # Start workers\nnuvom inspect job &lt;job_id&gt;    # Inspect job result and metadata\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<pre><code>git clone https://github.com/nahom-zewdu/Nuvom\ncd Nuvom\npip install -e .\n</code></pre>"},{"location":"#whats-next","title":"What\u2019s Next?","text":"<ul> <li>Quickstart \u2192</li> <li>Configuration \u2192</li> <li>CLI \u2192</li> <li>Core Concepts \u2192</li> <li>Plugin System \u2192</li> <li>Architecture \u2192</li> <li>Roadmap \u2192</li> <li>Contributing \u2192</li> <li>FAQ \u2192</li> </ul>"},{"location":"#license","title":"License","text":"<p>Apache 2.0 \u2014 use it freely, build responsibly.</p>"},{"location":"architecture/","title":"\ud83e\udde0 Nuvom Architecture","text":"<p>This document explains the internal architecture of Nuvom, a lightweight, plugin-first task execution engine for Python.</p>"},{"location":"architecture/#high-level-overview","title":"\ud83e\udde9 High-Level Overview","text":"<p>Nuvom is designed to decouple task definition, discovery, execution, queuing, and result storage. Each layer is pluggable and follows a clearly defined contract via abstract base classes.</p> <pre><code>     +-------------------------+\n     |      @task decorator    |\n     +-------------------------+\n                  |\n                  v\n      +------------------------+\n      |     Task Registry      | &lt;--- loaded from manifest\n      +------------------------+\n                  |\n                  v\n+-------------+     +-------------------+\n| Dispatcher  | --&gt; |  Job Queue        |\n+-------------+     +-------------------+\n                         |\n                         v\n            +----------------------+ \n            |   Worker Pool        |\n            | (Threads + Runner)   |\n            +----------------------+ \n                         |\n                         v\n            +----------------------+ \n            |  Result Backend      |\n            +----------------------+ \n````\n\n---\n\n## \ud83e\uddf1 Core Components\n\n### \u2705 `@task` Decorator\n\n**Location:** `nuvom/task.py`\n\n* Wraps a function to register it as a Nuvom task.\n* Adds metadata (`retries`, `timeout_secs`, etc.).\n* Supports `.delay()` and `.map()` for job dispatch.\n* All tasks are auto-registered via AST and manifest system.\n\n---\n\n### \u2705 Task Discovery\n\n**Location:** `nuvom/discovery/`\n\n* Uses AST parsing (not imports) to detect decorated `@task` functions.\n* Avoids side-effects, safe for large codebases.\n* Uses `.nuvomignore` to skip paths.\n* Output is cached in `.nuvom/manifest.json` for fast reloading.\n\nKey files:\n\n* `walker.py` \u2013 file traversal\n* `parser.py` \u2013 AST parsing\n* `manifest.py` \u2013 manifest file I/O\n* `auto_register.py` \u2013 registry loader\n\n---\n\n### \u2705 Task Registry\n\n**Location:** `nuvom/registry/registry.py`\n\n* Thread-safe global registry for tasks.\n* Validates task names (prevents duplicates unless `force=True`).\n* Used by the dispatcher and job runner to resolve function names.\n\n---\n\n### \u2705 Dispatcher\n\n**Location:** `nuvom/dispatcher.py`\n\n* Orchestrates job submission: serializes, enqueues, retries.\n* Provides `.delay()`, `.map()`, and job creation utilities.\n* Uses `msgpack` for efficient, cross-platform job serialization.\n\n---\n\n### \u2705 Job Queues\n\n**Location:** `nuvom/queue_backends/`\n\nBuilt-in backends:\n\n* `MemoryJobQueue`\n* `FileJobQueue`\n* `SQLiteJobQueue` (v0.10)\n\nRequired interface methods:\n\n```python\nenqueue(job)\ndequeue(timeout=None)\npop_batch(batch_size)\nqsize()\nclear()\n</code></pre> <p>Custom backends can be added via the plugin system.</p>"},{"location":"architecture/#workers-job-execution","title":"\u2705 Workers &amp; Job Execution","text":"<p>Location: <code>nuvom/worker.py</code>, <code>nuvom/execution/job_runner.py</code></p> <ul> <li>Each worker runs in its own thread.</li> <li> <p>Jobs are executed with timeouts, retries, and lifecycle hooks:</p> </li> <li> <p><code>before_job()</code></p> </li> <li><code>after_job()</code></li> <li><code>on_error()</code></li> <li>ThreadPoolExecutor is used internally for concurrency.</li> <li>Supports graceful shutdown with log flushing and safe teardown.</li> </ul>"},{"location":"architecture/#result-backends","title":"\u2705 Result Backends","text":"<p>Location: <code>nuvom/result_backends/</code></p> <p>Built-in backends:</p> <ul> <li><code>MemoryResultBackend</code></li> <li><code>FileResultBackend</code></li> <li><code>SQLiteResultBackend</code></li> </ul> <p>All result backends implement:</p> <pre><code>set_result(job_id, ...)\nget_result(job_id)\nset_error(job_id, ...)\nget_error(job_id)\nget_full(job_id)\nlist_jobs()\n</code></pre> <p>Use <code>.nuvom_plugins.toml</code> to register custom plugins.</p>"},{"location":"architecture/#logging","title":"\u2705 Logging","text":"<p>Location: <code>nuvom/log.py</code></p> <ul> <li>Unified logging across all modules using Rich.</li> <li>Logs are styled, color-coded, and exception-aware.</li> <li>Categories: <code>debug</code>, <code>info</code>, <code>warning</code>, <code>error</code>.</li> </ul>"},{"location":"architecture/#plugin-architecture","title":"\ud83d\udd0c Plugin Architecture","text":"<p>Location: <code>nuvom/plugins/</code></p> <p>Nuvom supports plugins for:</p> <ul> <li>Queues</li> <li>Result backends</li> <li>Monitoring/exporters</li> </ul> <p>Plugins follow a strict <code>Plugin</code> protocol with <code>start()</code> and <code>stop()</code> lifecycle methods.</p> <pre><code>[plugins]\nqueue_backend = [\"custom.module:MyQueue\"]\nresult_backend = [\"custom.module:MyResult\"]\n</code></pre> <p>Each plugin must register itself via a <code>Plugin</code> subclass, and may use <code>register_queue_backend()</code> or <code>register_result_backend()</code>.</p>"},{"location":"architecture/#job-lifecycle","title":"\ud83d\udd01 Job Lifecycle","text":"<ol> <li>Developer defines a task with <code>@task</code>.</li> <li><code>nuvom discover tasks</code> parses and caches it.</li> <li>Job is queued with <code>.delay()</code> or <code>.map()</code>.</li> <li>Worker dequeues the job.</li> <li> <p><code>JobRunner</code>:</p> </li> <li> <p>Triggers lifecycle hooks</p> </li> <li>Executes task with timeout/retry logic</li> <li>Stores result or error</li> <li>Job metadata is saved in the selected result backend.</li> <li>Results are queried via SDK or CLI.</li> </ol>"},{"location":"architecture/#design-principles","title":"\ud83c\udfaf Design Principles","text":"<ul> <li>\u2705 Plugin-first, interface-driven</li> <li>\u2705 No global daemons or dependencies like Redis</li> <li>\u2705 Developer-first: minimal config, rich logging, CLI tooling</li> <li>\u2705 Native on Windows, Linux, macOS</li> <li>\u2705 Built to teach: readable source, clean separation</li> </ul> <p>For more, see:</p> <ul> <li>CONTRIBUTING</li> <li>README</li> <li>Roadmap</li> </ul>"},{"location":"cli/","title":"\ud83e\uddea Command-Line Interface (CLI)","text":"<p>Nuvom ships with a powerful developer-first CLI for running workers, inspecting jobs, managing plugins, and more.</p> <p>Run the following to get started:</p> <pre><code>nuvom --help\n````\n\n---\n\n## \ud83d\udd27 Worker Control\n\n### Start Worker Threads\n\n```bash\nnuvom runworker\n</code></pre> <p>Starts the dispatcher and worker pool based on your <code>.env</code> settings.</p>"},{"location":"cli/#job-inspection-debugging","title":"\ud83d\udcca Job Inspection &amp; Debugging","text":""},{"location":"cli/#inspect-job-result","title":"Inspect Job Result","text":"<pre><code>nuvom inspect job &lt;job_id&gt;\n</code></pre> <p>View full metadata, result, or traceback for a job.</p>"},{"location":"cli/#check-status","title":"Check Status","text":"<pre><code>nuvom status &lt;job_id&gt;\n</code></pre> <p>Quickly fetch a job\u2019s final status.</p>"},{"location":"cli/#view-recent-history","title":"View Recent History","text":"<pre><code>nuvom history recent --limit 10 --status SUCCESS\n</code></pre> <p>See recent jobs by filter or limit.</p>"},{"location":"cli/#task-discovery-listing","title":"\u2699\ufe0f Task Discovery &amp; Listing","text":""},{"location":"cli/#discover-tasks","title":"Discover Tasks","text":"<pre><code>nuvom discover tasks\n</code></pre> <p>Parses project source files using AST and updates the manifest.</p>"},{"location":"cli/#list-tasks","title":"List Tasks","text":"<pre><code>nuvom list tasks\n</code></pre> <p>Displays all available <code>@task</code> functions registered in the manifest.</p>"},{"location":"cli/#local-job-runner","title":"\ud83e\uddea Local Job Runner","text":""},{"location":"cli/#run-job-locally-for-testing","title":"Run Job Locally (For Testing)","text":"<pre><code>nuvom runtestworker run --input myjob.json\n</code></pre> <p>Execute a job directly from a JSON file (offline, no queue).</p>"},{"location":"cli/#plugin-management","title":"\ud83d\udd0c Plugin Management","text":""},{"location":"cli/#test-plugins","title":"Test Plugins","text":"<pre><code>nuvom plugin test\n</code></pre> <p>Attempts to load all plugins from <code>.nuvom_plugins.toml</code> and verifies startup/shutdown.</p>"},{"location":"cli/#list-registered-plugins","title":"List Registered Plugins","text":"<pre><code>nuvom plugin status\n</code></pre> <p>Shows plugins currently registered by name and type.</p>"},{"location":"cli/#scaffold-plugin-stub","title":"Scaffold Plugin Stub","text":"<pre><code>nuvom plugin scaffold --type queue_backend --name my_plugin\n</code></pre> <p>Creates a boilerplate plugin file with the correct structure.</p>"},{"location":"cli/#configuration-helper","title":"\ud83d\udee0 Configuration Helper","text":"<pre><code>nuvom config\n</code></pre> <p>Prints all loaded environment variables and configuration values.</p>"},{"location":"cli/#tips","title":"\ud83d\udca1 Tips","text":"<ul> <li>Combine <code>discover tasks</code> and <code>list tasks</code> for troubleshooting discovery issues.</li> <li>Use <code>plugin test</code> if your backends aren\u2019t being picked up correctly.</li> <li><code>runtestworker</code> is useful for debugging serialization or runtime issues offline.</li> </ul>"},{"location":"concepts/","title":"Core Concepts","text":"<p>Nuvom is built around a small number of powerful, composable concepts. Mastering these is key to using (and extending) the system effectively.</p>"},{"location":"concepts/#task","title":"\ud83e\udde0 Task","text":"<p>A <code>Task</code> is a Python function decorated with <code>@task(...)</code>. It becomes a job template.</p> <pre><code>@task(retries=2, timeout_secs=5)\ndef send_email(to, body):\n    ...\n````\n\nEach task carries metadata like retry policy, timeout, and whether to store results.\n\n---\n\n## \ud83e\uddf1 Job\n\nA `Job` is a serialized instance of a task + arguments.\n\n```python\njob = send_email.delay(\"alice@example.com\", \"hello\")\n</code></pre> <p>Jobs are placed into a queue and executed by workers. You can inspect their metadata, result, status, and tracebacks.</p>"},{"location":"concepts/#worker","title":"\u2699\ufe0f Worker","text":"<p>A Worker is a thread that pulls jobs from the queue and executes them.</p> <p>Nuvom workers:</p> <ul> <li>Run in parallel (multi-threaded)</li> <li>Respect timeouts, retries, lifecycle hooks</li> <li>Use safe shutdown behavior (<code>SIGINT</code> triggers graceful stop)</li> <li>Work with plugin-registered backends</li> </ul> <p>You can start a worker pool with:</p> <pre><code>nuvom runworker\n</code></pre>"},{"location":"concepts/#dispatcher","title":"\ud83d\udea6 Dispatcher","text":"<p>The Dispatcher handles the logic of turning a function call into a job.</p> <ul> <li><code>.delay()</code> \u2192 single job</li> <li><code>.map()</code> \u2192 batch of jobs</li> <li>Supports metadata injection</li> <li>Automatically selects queue backend from config</li> </ul>"},{"location":"concepts/#queue-backend","title":"\ud83e\ude9c Queue Backend","text":"<p>A Queue Backend stores jobs awaiting execution.</p> <p>Nuvom ships with:</p> <ul> <li><code>MemoryJobQueue</code> \u2013 fast, ephemeral</li> <li><code>FileJobQueue</code> \u2013 atomic, file-based persistence</li> <li><code>SQLiteJobQueue</code> \u2013 relational queue with retries + visibility timeouts</li> </ul> <p>Plugins can register custom queues. Each queue implements:</p> <ul> <li><code>enqueue(job)</code></li> <li><code>dequeue(timeout)</code></li> <li><code>pop_batch(n)</code></li> <li><code>qsize()</code></li> <li><code>clear()</code></li> </ul>"},{"location":"concepts/#result-backend","title":"\ud83d\udce5 Result Backend","text":"<p>The Result Backend stores results or errors from executed jobs.</p> <p>Built-in backends:</p> <ul> <li><code>MemoryResultBackend</code> \u2013 ephemeral</li> <li><code>FileResultBackend</code> \u2013 persistent JSON lines</li> <li><code>SQLiteResultBackend</code> \u2013 full metadata, indexed queries</li> </ul> <p>Backends must implement:</p> <ul> <li><code>set_result(id, func, result)</code></li> <li><code>set_error(id, func, exc)</code></li> <li><code>get_result(id)</code></li> <li><code>get_error(id)</code></li> <li><code>get_full(id)</code></li> <li><code>list_jobs()</code></li> </ul>"},{"location":"concepts/#registry","title":"\ud83e\uddfe Registry","text":"<p>The Task Registry is a thread-safe mapping of task names \u2192 callables.</p> <ul> <li>Populated at startup from <code>.nuvom/manifest.json</code></li> <li>Also supports dynamic registration (<code>force</code>, <code>silent</code>, etc.)</li> <li>Used by workers to resolve jobs \u2192 functions</li> </ul>"},{"location":"concepts/#task-discovery","title":"\ud83d\udd0d Task Discovery","text":"<p>Nuvom uses static analysis (AST) to find <code>@task</code> decorators in your codebase.</p> <ul> <li>No runtime imports required</li> <li>Supports <code>.nuvomignore</code> and folder filters</li> <li>Stores results in <code>.nuvom/manifest.json</code></li> <li>Updated via <code>nuvom discover tasks</code></li> </ul> <p>This allows fast startup and avoids circular imports.</p>"},{"location":"concepts/#plugins","title":"\ud83d\udd0c Plugins","text":"<p>Plugins extend Nuvom dynamically \u2014 they can register:</p> <ul> <li>Queue backends</li> <li>Result backends</li> <li>Monitoring hooks</li> <li>Lifecycle-aware systems</li> </ul> <p>Plugins follow a standard <code>Plugin</code> protocol and are defined in <code>.nuvom_plugins.toml</code>.</p> <pre><code>[plugins]\nqueue_backend = [\"my_module:MyQueuePlugin\"]\n</code></pre> <p>Use <code>nuvom plugin test</code> to validate your plugin.</p>"},{"location":"concepts/#summary-table","title":"\ud83d\udca1 Summary Table","text":"Concept Role <code>@task</code> Defines metadata for background execution <code>Job</code> A task + args, queued for execution <code>Worker</code> Executes jobs from the queue <code>Queue</code> Stores jobs awaiting execution <code>Backend</code> Stores results, errors, and metadata <code>Dispatcher</code> Converts function calls into jobs <code>Registry</code> Maps task names to functions <code>Discovery</code> Scans source code and builds task manifest <code>Plugin</code> Dynamically extends Nuvom\u2019s capabilities"},{"location":"configuration/","title":"Nuvom Configuration Guide","text":"<p>Nuvom is highly configurable using environment variables and <code>.env</code> files. This guide explains all supported settings, how they affect runtime behavior, and how to configure plugins.</p>"},{"location":"configuration/#where-settings-come-from","title":"\ud83d\udcc1 Where Settings Come From","text":"<p>Nuvom loads configuration from:</p> <ol> <li><code>.env</code> file in your project root (uses <code>pydantic-settings</code>)</li> <li>Environment variables (<code>export FOO=...</code>)</li> <li>Defaults defined in code (if no value is provided)</li> </ol>"},{"location":"configuration/#example-env","title":"\ud83d\uddc3 Example <code>.env</code>","text":"<pre><code>NUVOM_ENVIRONMENT=dev\nNUVOM_LOG_LEVEL=INFO\nNUVOM_QUEUE_BACKEND=file\nNUVOM_RESULT_BACKEND=memory\nNUVOM_SERIALIZATION_BACKEND=msgpack\nNUVOM_MAX_WORKERS=4\nNUVOM_BATCH_SIZE=10\nNUVOM_JOB_TIMEOUT_SECS=30\nNUVOM_MANIFEST_PATH=.nuvom/manifest.json\nNUVOM_TIMEOUT_POLICY=retry\nNUVOM_PROMETHEUS_PORT=9150\nNUVOM_SQLITE_QUEUE_PATH=.nuvom/queue.db\nNUVOM_SQLITE_RESULT_PATH=.nuvom/results.db\n````\n\n---\n\n## \u2699\ufe0f Core Configuration Variables\n\n| Variable                      | Description                                              | Default                |\n| ----------------------------- | -------------------------------------------------------- | ---------------------- |\n| `NUVOM_ENVIRONMENT`           | `dev`, `test`, or `prod`                                 | `dev`                  |\n| `NUVOM_LOG_LEVEL`             | Logging level: `DEBUG`, `INFO`, etc.                     | `INFO`                 |\n| `NUVOM_QUEUE_BACKEND`         | Backend type: `memory`, `file`, or plugin name           | `memory`               |\n| `NUVOM_RESULT_BACKEND`        | Result store: `memory`, `file`, `sqlite`, or plugin name | `memory`               |\n| `NUVOM_SERIALIZATION_BACKEND` | Format: `msgpack` (others in future)                     | `msgpack`              |\n| `NUVOM_MANIFEST_PATH`         | Task discovery manifest path                             | `.nuvom/manifest.json` |\n| `NUVOM_JOB_TIMEOUT_SECS`      | Default job timeout (if not overridden in `@task`)       | `30`                   |\n| `NUVOM_BATCH_SIZE`            | Jobs pulled at once per worker cycle                     | `10`                   |\n| `NUVOM_MAX_WORKERS`           | Number of worker threads to spawn                        | `4`                    |\n| `NUVOM_TIMEOUT_POLICY`        | Behavior on timeout: `retry`, `fail`, `ignore`           | `retry`                |\n\n---\n\n## \ud83e\udde9 Plugin Configuration\n\nPlugins are registered via `.nuvom_plugins.toml` in the root of your project.\n\n```toml\n[plugins]\nqueue_backend = [\"my_module:MyQueuePlugin\"]\nresult_backend = [\"my_module:MyResultPlugin\"]\nmonitoring = [\"nuvom.plugins.monitoring.prometheus:PrometheusPlugin\"]\n</code></pre> <p>Use your <code>.env</code> to pass any plugin-specific values:</p> <pre><code>NUVOM_PROMETHEUS_PORT=9150\nMY_PLUGIN_AUTH_TOKEN=abc123\n</code></pre> <p>Inside the plugin, access them via the <code>settings</code> argument passed to <code>start()</code>:</p> <pre><code>def start(self, settings):\n    port = settings.get(\"prometheus_port\", 9150)\n</code></pre>"},{"location":"configuration/#sqlite-backend-settings","title":"\ud83e\udde0 SQLite Backend Settings","text":"<p>If you use the SQLite queue or result backend, configure paths:</p> Variable Purpose Default <code>NUVOM_SQLITE_QUEUE_PATH</code> SQLite file path for the job queue <code>.nuvom/queue.db</code> <code>NUVOM_SQLITE_RESULT_PATH</code> SQLite file path for result backend <code>.nuvom/results.db</code> <p>Ensure the directories exist or Nuvom will create them automatically.</p>"},{"location":"configuration/#cli-to-view-active-config","title":"\ud83e\uddea CLI to View Active Config","text":"<p>You can inspect current config at any time:</p> <pre><code>nuvom config\n</code></pre> <p>Output:</p> <pre><code>Environment: dev\nQueue Backend: file\nResult Backend: sqlite\nMax Workers: 4\nBatch Size: 10\nManifest Path: .nuvom/manifest.json\n...\n</code></pre>"},{"location":"configuration/#best-practices","title":"\ud83d\udd10 Best Practices","text":"<ul> <li>Commit a <code>.env.example</code> file for contributors</li> <li>Don\u2019t hardcode secrets or plugin tokens</li> <li>Keep <code>.env</code> out of version control (<code>.gitignore</code>)</li> <li>Use <code>dotenv</code> or OS environment overrides in CI/CD</li> </ul>"},{"location":"configuration/#summary","title":"\ud83e\udde9 Summary","text":"<p>Nuvom gives you full control over how it runs, queues jobs, stores results, and loads plugins \u2014 all through a clean <code>.env</code> and TOML-based system.</p> <p>You can:</p> <ul> <li>Swap backends without changing code</li> <li>Override runtime behavior with simple settings</li> <li>Pass config to your own plugins</li> <li>Use the CLI to verify current values</li> </ul> <p>Simple configs. Powerful control.</p>"},{"location":"contributing/","title":"Contributing to Nuvom","text":"<p>Thank you for considering contributing to Nuvom \u2014 a lightweight, plugin-first task execution engine.</p> <p>We welcome improvements in stability, performance, plugin support, documentation, bug fixes, and any enhancement that makes Nuvom a more reliable and developer-friendly tool.</p>"},{"location":"contributing/#project-setup-with-hatch","title":"\ud83d\udce6 Project Setup (with Hatch)","text":"<p>We use Hatch for managing environments, dependencies, testing, and packaging.</p>"},{"location":"contributing/#1-clone-the-repository","title":"1. Clone the repository","text":"<pre><code>git clone https://github.com/nahom-zewdu/Nuvom\ncd Nuvom\n````\n\n### 2. Install Hatch (once)\n\n```bash\npip install hatch\n</code></pre>"},{"location":"contributing/#3-enter-the-development-shell","title":"3. Enter the development shell","text":"<pre><code>hatch shell\n</code></pre> <p>This activates a fully isolated dev environment with all dependencies.</p>"},{"location":"contributing/#4-run-tests","title":"4. Run tests","text":"<pre><code>pytest\n</code></pre>"},{"location":"contributing/#5-try-the-cli","title":"5. Try the CLI","text":"<pre><code>nuvom --help\n</code></pre>"},{"location":"contributing/#plugin-based-development","title":"\ud83e\udde9 Plugin-Based Development","text":"<p>Most Nuvom components are extensible via base interfaces and the <code>Plugin</code> protocol.</p>"},{"location":"contributing/#add-a-new-queue-backend","title":"\u2795 Add a New Queue Backend","text":"<ol> <li>Subclass <code>BaseJobQueue</code> from <code>nuvom.queue_backends.base</code>.</li> <li> <p>Implement:</p> </li> <li> <p><code>enqueue</code>, <code>dequeue</code>, <code>pop_batch</code>, <code>qsize</code>, <code>clear</code></p> </li> <li> <p>Register:</p> </li> <li> <p>via <code>.env</code>, or</p> </li> <li>via <code>.nuvom_plugins.toml</code> (preferred)</li> <li>Add tests under <code>tests/queue_backends/</code></li> </ol>"},{"location":"contributing/#add-a-new-result-backend","title":"\u2795 Add a New Result Backend","text":"<ol> <li>Subclass <code>BaseResultBackend</code> from <code>nuvom.result_backends.base</code>.</li> <li> <p>Implement:</p> </li> <li> <p><code>set_result</code>, <code>get_result</code>, <code>set_error</code>, <code>get_error</code>, <code>get_full</code>, <code>list_jobs</code></p> </li> <li>Register the plugin</li> <li>Add tests under <code>tests/result_backends/</code></li> </ol>"},{"location":"contributing/#plugin-testing","title":"\ud83e\uddea Plugin Testing","text":"<p>Use the CLI to test plugin loading:</p> <pre><code>nuvom plugin test\nnuvom plugin list\nnuvom plugin inspect &lt;plugin_name&gt;\n</code></pre> <p>Example <code>.nuvom_plugins.toml</code>:</p> <pre><code>[plugins]\nqueue_backend = [\"my_module:MyQueuePlugin\"]\nresult_backend = [\"my_module:MyResultPlugin\"]\n</code></pre>"},{"location":"contributing/#testing-coverage","title":"\ud83e\uddea Testing &amp; Coverage","text":"<p>We use <code>pytest</code>. All new features must include tests.</p> <pre><code>pytest\n</code></pre> <p>Test philosophy:</p> <ul> <li>Use actual backends in test cases</li> <li>Cover all logic branches, including edge/failure cases</li> <li>Include both CLI and programmatic tests</li> <li>For plugin tests, use isolated <code>.nuvom_plugins.toml</code> in a temp dir</li> </ul>"},{"location":"contributing/#code-style-linting","title":"\ud83e\uddfc Code Style &amp; Linting","text":"<p>Follow PEP8 and our project standards.</p>"},{"location":"contributing/#format-lint-code","title":"Format &amp; lint code","text":"<pre><code>hatch run fmt\n</code></pre> <p>Which runs:</p> <ul> <li><code>black .</code></li> <li><code>ruff check .</code></li> </ul> <p>See <code>pyproject.toml</code> for configuration.</p>"},{"location":"contributing/#logging-guidelines","title":"\ud83e\udde0 Logging Guidelines","text":"<ul> <li>Use <code>nuvom.log.logger</code>, not <code>print()</code></li> <li><code>logger.debug</code> \u2192 internals</li> <li><code>logger.info</code> \u2192 lifecycle events (e.g., job started)</li> <li><code>logger.error</code> \u2192 job or system failures</li> </ul>"},{"location":"contributing/#commit-conventions","title":"\ud83d\udcdc Commit Conventions","text":"<p>Use semantic, scoped commit messages. Examples:</p> <pre><code>feat(plugins): add dynamic plugin registry and loader\nfeat(result): support SQLite result backend\nfeat(worker): implement graceful shutdown logic\ntest(plugin): add test for plugin-registered backend\ndocs: update CONTRIBUTING for plugin architecture\n</code></pre>"},{"location":"contributing/#suggested-directory-layout","title":"\ud83d\udcc1 Suggested Directory Layout","text":"<pre><code>nuvom/\n\u251c\u2500\u2500 cli/               # Typer CLI commands\n\u251c\u2500\u2500 queue_backends/    # Job queues (memory, SQLite, etc.)\n\u251c\u2500\u2500 result_backends/   # Task result stores\n\u251c\u2500\u2500 plugins/           # Loader, registry, capabilities\n\u251c\u2500\u2500 execution/         # JobRunner and context\n\u251c\u2500\u2500 discovery/         # Static task discovery logic\n\u251c\u2500\u2500 registry/          # Task registry and hook system\n\u251c\u2500\u2500 task.py            # @task decorator\n\u251c\u2500\u2500 config.py          # App config loader (pydantic)\n\u251c\u2500\u2500 log.py             # Rich-based logger\n\u251c\u2500\u2500 worker.py          # Worker pool, threading, retry\n</code></pre>"},{"location":"contributing/#best-practices","title":"\u2705 Best Practices","text":"<ul> <li>Think in small, testable units</li> <li>Prefer clarity over cleverness</li> <li>Avoid global state unless essential</li> <li>Use plugin-based injection when adding new backends</li> <li>Document public APIs with docstrings</li> <li>Follow the <code>Plugin</code> contract for lifecycle integration</li> </ul>"},{"location":"contributing/#code-review-process","title":"\ud83e\udd1d Code Review Process","text":"<ol> <li>Fork the repo, create a feature branch</li> <li>Add code and tests</li> <li>Submit a PR with a clear title and description</li> <li>A maintainer will review and provide feedback</li> <li>Once approved, the PR is merged into the main branch</li> </ol>"},{"location":"contributing/#need-help","title":"\ud83d\udcec Need Help?","text":"<p>Feel free to open an issue \u2014 questions, bugs, and ideas are all welcome.</p> <p>For more context, see <code>README.md</code> and <code>docs/architecture.md</code>.</p> <p>Happy contributing! \ud83d\ude80\ud83e\udde0</p>"},{"location":"faq/","title":"\u2753 Nuvom FAQ","text":"<p>Welcome to the Nuvom Frequently Asked Questions. This page answers common questions about how Nuvom works, why it was designed this way, and how to resolve potential issues.</p>"},{"location":"faq/#why-doesnt-nuvom-require-redis-or-a-message-broker","title":"\ud83d\udd27 Why doesn\u2019t Nuvom require Redis or a message broker?","text":"<p>Because it doesn\u2019t need one. Nuvom handles queuing and result persistence using pluggable local backends like memory, file, and SQLite.</p> <p>This keeps setup minimal \u2014 no servers, no daemons, no Docker.</p> <p>For larger or distributed use cases, Redis support is planned as a plugin.</p>"},{"location":"faq/#does-nuvom-run-on-windows","title":"\ud83e\ude9f Does Nuvom run on Windows?","text":"<p>Yes. Nuvom is 100% Windows-compatible \u2014 no reliance on POSIX signals, <code>fork()</code>, or Unix-only libraries. It works on Windows, Linux, and macOS out of the box.</p>"},{"location":"faq/#how-does-task-discovery-work-without-importing-modules","title":"\ud83e\udde0 How does task discovery work without importing modules?","text":"<p>Nuvom uses AST parsing to detect <code>@task</code> decorators. This means:</p> <ul> <li>No need to import modules</li> <li>No side effects from imports</li> <li>Safe even in large codebases</li> <li>Fast and cacheable (<code>.nuvom/manifest.json</code>)</li> </ul>"},{"location":"faq/#why-isnt-my-task-showing-up","title":"\ud83d\udca5 Why isn\u2019t my task showing up?","text":"<p>Check the following:</p> <ul> <li>Did you run <code>nuvom discover tasks</code>?</li> <li>Is the file skipped by <code>.nuvomignore</code>?</li> <li>Is the task defined with <code>@task</code> (not a typo)?</li> <li>Is the file inside your current working directory?</li> </ul> <p>You can always inspect the manifest manually at <code>.nuvom/manifest.json</code>.</p>"},{"location":"faq/#my-job-failed-how-do-i-retry-it","title":"\ud83d\udd01 My job failed. How do I retry it?","text":"<p>Use either the CLI or the SDK:</p> <p>CLI:</p> <pre><code>nuvom inspect job &lt;job_id&gt;\nnuvom retry job &lt;job_id&gt;\n````\n\n**Python:**\n\n```python\nfrom nuvom.sdk import retry_job\nretry_job(\"&lt;job_id&gt;\")\n</code></pre>"},{"location":"faq/#how-do-timeouts-and-retries-work","title":"\u23f2 How do timeouts and retries work?","text":"<p>Each task can define:</p> <ul> <li><code>timeout_secs</code>: max execution time</li> <li><code>retries</code>: max retry attempts</li> <li><code>retry_delay_secs</code>: wait between retries</li> <li><code>timeout_policy</code>: <code>retry</code>, <code>fail</code>, or <code>ignore</code></li> </ul> <p>If a task times out or fails, Nuvom uses these fields to determine what happens next.</p>"},{"location":"faq/#how-do-i-test-my-plugins","title":"\ud83e\uddea How do I test my plugins?","text":"<p>Use the plugin testing CLI:</p> <pre><code>nuvom plugin test\nnuvom plugin inspect &lt;plugin_name&gt;\n</code></pre> <p>Make sure your <code>.nuvom_plugins.toml</code> file points to a valid Python module implementing the <code>Plugin</code> protocol.</p>"},{"location":"faq/#where-is-job-data-stored","title":"\ud83d\udce6 Where is job data stored?","text":"<p>Depends on your backend:</p> <ul> <li>Memory backend: stored in RAM (temporary)</li> <li>File backend: stored under <code>.nuvom/jobs/</code></li> <li>SQLite backend: stored in <code>.nuvom/result.db</code> or as configured</li> </ul> <p>Use <code>.env</code> to control storage location and backend type.</p>"},{"location":"faq/#my-job-runs-fine-manually-but-fails-in-the-worker","title":"\ud83d\udeab My job runs fine manually, but fails in the worker","text":"<p>This usually means:</p> <ul> <li>The task file isn\u2019t discovered (use <code>nuvom discover tasks</code>)</li> <li>You have code that assumes global state or one-time imports</li> <li>The environment differs (missing <code>.env</code> vars or dependencies)</li> </ul> <p>Try running:</p> <pre><code>nuvom runtestworker run --job-file myjob.json\n</code></pre> <p>This simulates a worker run locally.</p>"},{"location":"faq/#what-can-i-build-with-plugins","title":"\ud83e\udde9 What can I build with plugins?","text":"<p>Anything:</p> <ul> <li>Queue backends (e.g., SQLite, Redis, custom API)</li> <li>Result backends (file, SQL, S3, etc.)</li> <li>Monitoring exporters (Prometheus, JSON logs)</li> <li>CLI extensions or pre/post-run hooks</li> </ul> <p>Nuvom's plugin system supports dynamic registration and lifecycle events (<code>start()</code>, <code>stop()</code>).</p>"},{"location":"faq/#does-nuvom-support-distributed-workers","title":"\u26a0\ufe0f Does Nuvom support distributed workers?","text":"<p>Not yet. Current backends (memory, file, SQLite) are designed for single-host or single-disk usage.</p> <p>Distributed execution (e.g., multiple machines) will require network-aware backends like Redis or Postgres \u2014 coming in post\u2011v1 releases.</p>"},{"location":"faq/#got-a-question-thats-not-listed","title":"\ud83d\udca1 Got a question that\u2019s not listed?","text":"<p>Open an issue on GitHub or reach out via the project discussion board. We\u2019ll update this page as real-world usage evolves.</p>"},{"location":"plugins/","title":"Plugin System","text":"<p>Nuvom v0.9 introduced first-class plugin support \u2014 allowing developers to register their own backends, extensions, and instrumentation layers with clean lifecycle management.</p>"},{"location":"plugins/#what-is-a-plugin","title":"\ud83d\udd0c What is a Plugin?","text":"<p>A plugin is a Python class that implements the <code>Plugin</code> protocol, defining:</p> <ul> <li><code>name</code>: Unique plugin name</li> <li><code>provides</code>: What kind of capability it offers (e.g. <code>queue_backend</code>, <code>monitoring</code>)</li> <li><code>start(settings: dict)</code>: Initialization logic</li> <li><code>stop()</code>: Cleanup logic on shutdown</li> </ul>"},{"location":"plugins/#file-layout","title":"\ud83d\udcc1 File Layout","text":"<p>Plugins can live inside your project or in external libraries. Common layout:</p> <pre><code>my_project/\n\u251c\u2500\u2500 plugins/\n\u2502   \u251c\u2500\u2500 my_plugin.py       # Your plugin logic\n\u2502   \u2514\u2500\u2500 __init__.py\n\u2514\u2500\u2500 .nuvom_plugins.toml    # Plugin registration\n````\n\n---\n\n## \ud83e\uddf1 Plugin Example: Custom Queue Backend\n\n```python\n# plugins/my_queue.py\nfrom nuvom.queue_backends.base import BaseJobQueue\nfrom nuvom.plugins.contracts import Plugin\n\nclass MyQueue(BaseJobQueue):\n    def enqueue(self, job): ...\n    def dequeue(self, timeout=None): ...\n    def pop_batch(self, n): ...\n    def qsize(self): ...\n    def clear(self): ...\n\nclass MyPlugin(Plugin):\n    name = \"my_queue\"\n    provides = [\"queue_backend\"]\n\n    def start(self, settings):\n        from nuvom.plugins.registry import register_queue_backend\n        register_queue_backend(\"my_custom_queue\", MyQueue)\n\n    def stop(self):\n        pass\n</code></pre> <p>Then register in <code>.nuvom_plugins.toml</code>:</p> <pre><code>[plugins]\nqueue_backend = [\"plugins.my_queue:MyPlugin\"]\n</code></pre>"},{"location":"plugins/#plugin-registry","title":"\ud83d\uddc3 Plugin Registry","text":"<p>Nuvom loads plugins at worker startup (not during CLI commands).</p> <p>Each plugin is discovered from <code>.nuvom_plugins.toml</code>, instantiated, and injected with runtime settings.</p> <p>To test plugin loading:</p> <pre><code>nuvom plugin test\nnuvom plugin list\nnuvom plugin inspect my_queue\n</code></pre>"},{"location":"plugins/#plugin-lifecycle","title":"\ud83d\udee0 Plugin Lifecycle","text":"<p>Each plugin receives a <code>start(settings)</code> call when the worker starts.</p> <p>Example use cases:</p> <ul> <li>Registering new backends</li> <li>Spawning monitoring threads</li> <li>Configuring metrics exporters</li> <li>Connecting to databases</li> </ul> <p>On shutdown (<code>CTRL+C</code>, SIGINT), plugins receive a <code>stop()</code> call to clean up.</p>"},{"location":"plugins/#plugin-types","title":"\ud83e\uddea Plugin Types","text":"Provides Purpose <code>queue_backend</code> Add a new job queue implementation <code>result_backend</code> Add a result/error store <code>monitoring</code> Expose runtime metrics (e.g. Prometheus) <code>lifecycle_hook</code> Run logic on job events (future)"},{"location":"plugins/#monitoring-plugin-example","title":"\ud83d\udcca Monitoring Plugin Example","text":"<pre><code># plugins/prometheus_exporter.py\nfrom nuvom.plugins.contracts import Plugin\nfrom nuvom.plugins.registry import register_metrics_provider\n\nclass PrometheusPlugin(Plugin):\n    name = \"prometheus\"\n    provides = [\"monitoring\"]\n\n    def start(self, settings):\n        from my_exporter import run_exporter\n        run_exporter(port=settings.get(\"prometheus_port\", 9150))\n\n    def stop(self):\n        ...\n</code></pre>"},{"location":"plugins/#best-practices","title":"\ud83e\udde0 Best Practices","text":"<ul> <li>Keep plugins self-contained.</li> <li>Use <code>settings</code> from <code>.env</code> or custom sources.</li> <li>Fail fast if required dependencies are missing.</li> <li>Avoid blocking inside <code>start()</code> \u2014 spawn threads if needed.</li> <li>Don\u2019t forget <code>stop()</code> for graceful cleanup.</li> </ul>"},{"location":"plugins/#cli-support","title":"\ud83d\udea6 CLI Support","text":"Command Description <code>nuvom plugin test</code> Validates and loads plugins <code>nuvom plugin list</code> Lists registered plugin types <code>nuvom plugin inspect</code> Shows metadata for one plugin"},{"location":"plugins/#roadmap-future-plugin-hooks","title":"\ud83d\udea7 Roadmap (Future Plugin Hooks)","text":"Feature Status <code>before_job</code>, <code>after_job</code> [ ] Planned (via plugin) <code>metrics_provider</code> interface \u2705 Prometheus supported CLI plugin extensions [ ] Future Multi-process plugin runners [ ] Future"},{"location":"plugins/#summary","title":"\ud83e\udde9 Summary","text":"<p>Plugins allow you to:</p> <ul> <li>Add new backends (queue, result)</li> <li>Hook into Nuvom\u2019s lifecycle</li> <li>Export runtime metrics</li> <li>Customize behavior without modifying Nuvom core</li> </ul> <p>Plugins make Nuvom truly pluggable. Add what you need \u2014 nothing more.</p>"},{"location":"quickstart/","title":"Quickstart","text":"<p>This guide walks you through installing Nuvom, defining your first task, and running workers \u2014 all in under 5 minutes.</p>"},{"location":"quickstart/#installation","title":"\ud83d\udd27 Installation","text":"<p>Nuvom is under active development. Until the first stable release, install it from source:</p> <pre><code>git clone https://github.com/nahom-zewdu/Nuvom\ncd Nuvom\npip install -e .\n````\n\nIf you plan to contribute or run the documentation:\n\n```bash\nhatch shell\n</code></pre> <p>This will install all development and documentation dependencies inside a Hatch-managed environment.</p>"},{"location":"quickstart/#1-define-a-task","title":"1. Define a Task","text":"<p>Tasks are regular Python functions decorated with <code>@task</code>:</p> <pre><code># tasks.py\nfrom nuvom.task import task\n\n@task(retries=2, retry_delay_secs=5, timeout_secs=3, store_result=True)\ndef add(x, y):\n    return x + y\n</code></pre> <p>The decorator enables retry logic, timeouts, and lets you dispatch with <code>.delay()</code> or <code>.map()</code>.</p>"},{"location":"quickstart/#2-discover-tasks-optional-but-recommended","title":"2. Discover Tasks (Optional but Recommended)","text":"<p>Nuvom uses static AST-based discovery to find task definitions without executing your code.</p> <p>Run once:</p> <pre><code>nuvom discover tasks\n</code></pre> <p>This generates <code>.nuvom/manifest.json</code> to speed up worker startup and avoid runtime imports.</p>"},{"location":"quickstart/#3-submit-a-job","title":"3. Submit a Job","text":"<p>Dispatch jobs programmatically:</p> <pre><code>from tasks import add\n\njob = add.delay(5, 7)\nprint(job.id)\n</code></pre>"},{"location":"quickstart/#4-run-a-worker","title":"4. Run a Worker","text":"<p>Workers execute jobs in parallel threads:</p> <pre><code>nuvom runworker\n</code></pre> <p>You can configure worker behavior (e.g., count, batch size) via <code>.env</code>. See Configuration for full details.</p>"},{"location":"quickstart/#5-inspect-job-status","title":"5. Inspect Job Status","text":"<pre><code>nuvom inspect job &lt;job_id&gt;\n</code></pre> <p>This shows result, error, traceback, retries remaining, and timestamps.</p> <p>To view recent jobs:</p> <pre><code>nuvom history recent --limit 10\n</code></pre>"},{"location":"quickstart/#6-retry-failed-jobs","title":"6. Retry Failed Jobs","text":"<p>Retry manually from Python:</p> <pre><code>from nuvom.sdk import retry_job\n\nretry_job(\"&lt;job_id&gt;\")\n</code></pre> <p>CLI support for retrying is coming soon.</p>"},{"location":"roadmap/","title":"\ud83d\udee3\ufe0f Nuvom Roadmap","text":"<p>This document outlines Nuvom\u2019s development milestones, from initial prototype to the current release, and what\u2019s ahead for v1.0 and beyond.</p> <p>Nuvom is built to be a developer-first, plugin-friendly, and Redis-free task execution engine. We\u2019re designing for real-world problems across local development, production, and Windows environments \u2014 with predictability, extensibility, and intuitiveness at the core.</p>"},{"location":"roadmap/#completed-milestones","title":"\u2705 Completed Milestones","text":""},{"location":"roadmap/#v01-core-foundations","title":"v0.1 \u2014 Core Foundations","text":"<ul> <li>Basic <code>@task()</code> decorator with <code>.delay()</code></li> <li>In-memory queue and worker threads</li> <li>Functional CLI: <code>nuvom runworker</code>, <code>nuvom list tasks</code></li> </ul>"},{"location":"roadmap/#v02-result-backends-cli","title":"v0.2 \u2014 Result Backends &amp; CLI","text":"<ul> <li>Pluggable result backend interface</li> <li>File-based result store</li> <li>Full CLI inspection commands</li> </ul>"},{"location":"roadmap/#v03-queue-backends","title":"v0.3 \u2014 Queue Backends","text":"<ul> <li>File-based persistent job queue</li> <li>Msgpack serialization for jobs</li> <li><code>.corrupt</code> quarantine for bad jobs</li> </ul>"},{"location":"roadmap/#v04-runtime-execution-hooks","title":"v0.4 \u2014 Runtime Execution &amp; Hooks","text":"<ul> <li><code>ExecutionEngine</code> abstraction</li> <li>Timeout and retries</li> <li>Lifecycle hooks: <code>before_job</code>, <code>after_job</code>, <code>on_error</code></li> </ul>"},{"location":"roadmap/#v05-static-task-discovery","title":"v0.5 \u2014 Static Task Discovery","text":"<ul> <li>AST-powered task detection</li> <li><code>.nuvomignore</code> support</li> <li>Manifest system for caching task metadata</li> </ul>"},{"location":"roadmap/#v06-developer-experience-boosts","title":"v0.6 \u2014 Developer Experience Boosts","text":"<ul> <li>Dev mode (<code>--dev</code>) for hot task reloading</li> <li>Manifest diffing and CLI-rich task listings</li> <li>Structured logs and tracebacks via <code>rich</code></li> </ul>"},{"location":"roadmap/#v07-observability-history","title":"v0.7 \u2014 Observability &amp; History","text":"<ul> <li>Tracebacks for all jobs</li> <li>Full CLI metadata inspection</li> <li>Historical job browsing</li> </ul>"},{"location":"roadmap/#v08-reliability-and-polish","title":"v0.8 \u2014 Reliability and Polish","text":"<ul> <li>Retry-on-failure system</li> <li>Timeout policy: <code>retry</code>, <code>fail</code>, <code>ignore</code></li> <li>SDK retry tools</li> <li>Job attempt metadata and diagnostics</li> </ul>"},{"location":"roadmap/#v09-plugin-architecture-sqlite","title":"v0.9 \u2014 Plugin Architecture + SQLite","text":"<ul> <li>Fully dynamic plugin system via <code>.nuvom_plugins.toml</code></li> <li>SQLite result backend</li> <li>Graceful shutdown lifecycle for plugin-based workers</li> <li>Plugin-based test coverage</li> </ul>"},{"location":"roadmap/#next-release-v010","title":"\ud83d\udea7 Next Release: <code>v0.10</code>","text":"<p>Status: Final pre-v1 foundation</p> <ul> <li>[x] SQLite-based persistent queue backend</li> <li>[x] Visibility timeout &amp; requeue support</li> <li>[x] Plugin regression test suite</li> <li>[x] Built-in Prometheus metrics plugin</li> <li>[x] MkDocs documentation site</li> <li>[x] Performance &amp; concurrency benchmarking</li> <li>[x] Plugin lifecycle: <code>start(settings)</code>, <code>stop()</code></li> <li>[x] Queue introspection metrics: <code>queue_size</code>, <code>inflight_jobs</code></li> <li>[ ] Final polish + bugfixes for v0.10 release</li> </ul>"},{"location":"roadmap/#v10-goals-stable-core","title":"\ud83e\udde0 v1.0 Goals \u2014 Stable Core","text":"<ul> <li>\u2705 Windows-native, Redis-free by design</li> <li>\u2705 No imports required: safe task discovery via AST</li> <li>\u2705 CLI-driven, scriptable, and testable</li> <li>\u2705 Plugin-first queue &amp; result architecture</li> <li>\u2705 Observability, retries, and timeouts</li> <li>\ud83e\udde9 Plugin registry contracts + third-party plugin showcase</li> <li>\ud83d\udcca Rich dashboard and metrics browser</li> <li>\ud83c\udfaf Queue system stress-tested for multi-core workloads</li> </ul>"},{"location":"roadmap/#post10-backlog-ideas","title":"\ud83c\udf0d Post\u20111.0 Backlog (Ideas)","text":"<p>These features are actively under exploration \u2014 not committed to a specific release:</p> <ul> <li>[ ] Redis queue and result backend (optional, opt-in)</li> <li>[ ] Multi-host worker cluster (via file locks or RPC mesh)</li> <li>[ ] DAG-style task chaining: <code>task1().then(task2)</code></li> <li>[ ] Plugin sandboxing and capability enforcement</li> <li>[ ] Web UI / dashboard to browse queue + workers</li> <li>[ ] VSCode extension: discover tasks visually, browse results</li> <li>[ ] Task versioning and signature integrity check</li> <li>[ ] Offline <code>.nuvom_tasks.json</code> static task export (zero-import bootstrap)</li> </ul>"},{"location":"roadmap/#want-to-contribute","title":"\ud83d\udce3 Want to Contribute?","text":"<p>The roadmap is shaped by real-world problems. Open an issue or discussion if:</p> <ul> <li>You need support for a custom backend</li> <li>You\u2019re building a dashboard or monitoring tool</li> <li>You\u2019re using Nuvom at scale and hitting edge cases</li> <li>You want to build your own plugin or backend</li> </ul> <p>Let\u2019s build something lean, sharp, and powerful \u2014 together.</p>"}]}